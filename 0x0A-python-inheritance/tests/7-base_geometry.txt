'''
# Import the required class
>>> from importlib import import_module
>>> BaseGeometry = import_module('7-base_geometry').BaseGeometry

>>> BaseGeometry().integer_validator('foo', 2)

>>> try:
...     BaseGeometry().area()
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[Exception] area() is not implemented
>>> try:
...     BaseGeometry().integer_validator('foo', '23')
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', True)
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', b'2')
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', 2.7)
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', 2.0)
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', float('inf'))
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', float('-inf'))
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer
>>> try:
...     BaseGeometry().integer_validator('foo', float('nan'))
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[TypeError] foo must be an integer

>>> try:
...     BaseGeometry().integer_validator('foo', 0)
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[ValueError] foo must be greater than 0
>>> try:
...     BaseGeometry().integer_validator('foo', -12)
... except Exception as ex:
...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
[ValueError] foo must be greater than 0

'''
